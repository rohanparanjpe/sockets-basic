/*
 * Creating we bserver for our chatt app
*/

var PORT = process.env.PORT || 3000;
var moment = require('moment');
var express = require('express');  //load express using module name
var app = express();  // we create new express app , when we have to add a new route to express we use app.(something) eg app.get

var http= require('http').Server(app);  // It asks node to start new server and use app as boiler plate

var io =require('socket.io')(http)   //calling socket with http server
app.use(express.static(__dirname + '/public'));

// store client info
  // it is key => value pair key is generated by socket and value is name
var clientInfo = {};   





// on lets u listen for events
io.on('connection',function(socket){     // access to individual socket
    
 console.log('User connected by socket.io');   
    
    // disconnecting the user
    
 socket.on('disconnect', function(){
     var userData = clientInfo[socket.id];
         // this will run only if there is info about client in socket
       if(typeof userData != 'undefined'){
           socket.leave(userData.room); // user is disconnected from chat room
           io.to(userData.room).emit('message',{
              name:'System',
              text: userData.name + ' has left! ',
              timestamp: moment().valueOf()   
               
           });
           // delete user data
          delete clientInfo[socket.id];
       }
   });
 
/*
 Handle the joinRoom event 
*/
    
socket.on('joinRoom',function(req){
    
      clientInfo[socket.id] = req;
         // socket .join adds socket to the room
     socket.join(req.room);
     socket.broadcast.to(req.room).emit('message',{   // sends messages in the room
         
        name:'System',
        text: req.name + ' has joined! ' ,
        timestamp: moment().valueOf() 
         
     });
     
 });
    
    
/*
  * Make two browser communicate to each other
 */
 
socket.on('message',function(message){
    
    console.log('Message recieved:'+ message.text);
   message.timestamp = moment().valueOf();  //getting unix timestamp in milliseconds
    io.to(clientInfo[socket.id].room).emit('message',message); // it only emits messages to people in same room
       
    // socket.broadcast.emit('message',message);  it sends to everybody but to user who sent it while io.emit sends it to everyone including sender
    
});    
    
 //socket.emit takes two arguments 'event',{object} event coudl be anything liek pizza delivered, cash got etc here we use message as our event 
    
    socket.emit('message',{
     
    name:'System',
     text:'Welcome to chat application' ,
     timestamp: moment().valueOf()
              
    });

}); 




//starting server
http.listen(PORT, function(){
    
 console.log('Server Started!!');   
    
});

